use super::bitboard;
use crate::bitboard::constants::VALID_FIELDS;
use crate::HashKeys;
use rand::RngCore;

pub const NEIGHBOR_MAGIC: u64 = 10525554454693953600u64;
#[rustfmt::skip]
pub const NEIGHBOR_MAGIC_LOOKUP : [u32;2046] = [0u32, 8193u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 8193u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 8388610u32, 8396800u32, 4294967295u32, 4294967295u32, 0u32, 1u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 2u32, 8192u32, 4294967295u32, 4294967295u32, 0u32, 1u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 2u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 2u32, 0u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 16777218u32, 16777217u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 8390656u32, 8390656u32, 2u32, 1u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 25165824u32, 25165824u32, 0u32, 0u32, 2u32, 1u32, 4294967295u32, 4294967295u32, 1u32, 0u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 2u32, 1u32, 4294967295u32, 0u32, 1u32, 0u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 2u32, 8192u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 2u32, 8192u32, 4294967295u32, 4294967295u32, 8388608u32, 8396800u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 2u32, 0u32, 4294967295u32, 4294967295u32, 0u32, 8192u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 2u32, 0u32, 4294967295u32, 0u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 16777216u32, 16777216u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 8388608u32, 8388608u32, 0u32, 0u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 25165824u32, 25165824u32, 0u32, 0u32, 0u32, 0u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 4294967295u32, 0u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 16779264u32, 16787457u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 16777218u32, 16785408u32, 4294967295u32, 4294967295u32, 2048u32, 2049u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 8192u32, 2u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 8192u32, 4294967295u32, 4294967295u32, 4294967295u32, 8388608u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 2050u32, 2049u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 2050u32, 2049u32, 4294967295u32, 4294967295u32, 1u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 16777216u32, 16777216u32, 16777216u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 8390656u32, 4294967295u32, 0u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 25165824u32, 4294967295u32, 0u32, 4294967295u32, 0u32, 0u32, 0u32, 4294967295u32, 0u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 16777218u32, 16785408u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 16777216u32, 16785408u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 2u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 8388608u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 16777216u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 8388608u32, 4294967295u32, 0u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 8396800u32, 8388609u32, 25165824u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 8192u32, 1u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 8194u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 8194u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 16779264u32, 16777216u32, 16785408u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 16777216u32, 4294967295u32, 4294967295u32, 4294967295u32, 2048u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 8388610u32, 8388609u32, 4294967295u32, 0u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 0u32, 1u32, 2u32, 1u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 0u32, 1u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 8388608u32, 8388608u32, 0u32, 0u32, 0u32, 1u32, 4294967295u32, 4294967295u32, 4294967295u32, 2048u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 0u32, 1u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 2048u32, 0u32, 0u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 16777216u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 8194u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 8194u32, 0u32, 4294967295u32, 4294967295u32, 8192u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 8192u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 16777216u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 16777216u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 8388608u32, 8388608u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 0u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 10240u32, 2049u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 8194u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 8388608u32, 8192u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 8192u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 2050u32, 2049u32, 4294967295u32, 16777216u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 2048u32, 2049u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 2048u32, 2049u32, 4294967295u32, 4294967295u32, 4294967295u32, 8388608u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 0u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 8388608u32, 4294967295u32, 0u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 8194u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 8192u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 2050u32, 10240u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 8388608u32, 2u32, 8192u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 8388609u32, 8396800u32, 4294967295u32, 4294967295u32, 2050u32, 2048u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 1u32, 8192u32, 4294967295u32, 4294967295u32, 2u32, 0u32, 4294967295u32, 2048u32, 8192u32, 0u32, 1u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 1u32, 0u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 16779264u32, 16779264u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 8388608u32, 8388609u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 25165827u32, 25165824u32, 0u32, 1u32, 2048u32, 2048u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 3u32, 0u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 4294967295u32, 2048u32, 0u32, 0u32, 3u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 2048u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 3u32, 0u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 2048u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 0u32, 8192u32, 0u32, 8192u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 8192u32, 0u32, 8192u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 0u32, 0u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 16777216u32, 16777216u32, 16777218u32, 16777216u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 2u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 2u32, 0u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 2u32, 0u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 16777218u32, 16785408u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 16777217u32, 16785408u32, 4294967295u32, 4294967295u32, 2u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 2048u32, 4294967295u32, 4294967295u32, 1u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 8388608u32, 4294967295u32, 4294967295u32, 4294967295u32, 2048u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 0u32, 4294967295u32, 0u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 2048u32, 2049u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 3u32, 0u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 16779264u32, 4294967295u32, 4294967295u32, 3u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 8388608u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 25165824u32, 4294967295u32, 0u32, 4294967295u32, 2048u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 16777216u32, 16785408u32, 16777216u32, 16785408u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 2u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 2u32, 0u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 16777216u32, 4294967295u32, 16777216u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 8398850u32, 8390656u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 0u32, 4294967295u32, 0u32, 8194u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 8193u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 8193u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 16777216u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 16777216u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 8390656u32, 8390656u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 2048u32, 2048u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 3u32, 0u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 8388609u32, 8388608u32, 3u32, 0u32, 2048u32, 2048u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 1u32, 0u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 4294967295u32, 2048u32, 0u32, 0u32, 1u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 1u32, 0u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 8396800u32, 8388608u32, 8192u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 8192u32, 0u32, 8192u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 16777216u32, 4294967295u32, 16777216u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 8388608u32, 8388608u32, 2u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 0u32, 0u32, 2u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 0u32, 0u32, 4294967295u32, 0u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 8194u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 0u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 8193u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 8390656u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 3u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 1u32, 0u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 8390656u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 2048u32, 4294967295u32, 0u32, 1u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 8388608u32, 4294967295u32, 0u32, 4294967295u32, 2048u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 8192u32, 0u32, 8192u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 8388608u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 2u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 0u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 0u32, 0u32, 0u32, 4294967295u32, 8388608u32, 4294967295u32, 0u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 4294967295u32, 0u32, 4294967295u32, 0u32, 4294967295u32, 0u32 ];

pub const NEIGHBOR_MASK_12: u128 = bitboard::get_neighbours(1u128 << CENTERED_FIELD);
const BITS: usize = 11;
const PATTERNS: usize = 729;
const MAX_SIZE: usize = 2048;

const CENTERED_FIELD: usize = 12;
//Make sure bb is centered for field 12 and anded with Neighbormask12 already
pub fn apply_magic(magic: u64, bb: u64) -> usize {
    (bb.wrapping_mul(magic) >> (64 - BITS)) as usize
}

pub fn is_valid_magic(
    magic: u64,
    valid_pattern: &Vec<(u32, u64)>,
) -> (bool, Option<[u32; MAX_SIZE]>) {
    let invalid_value = std::u32::MAX;
    let mut lookup = [invalid_value; MAX_SIZE];
    for pattern in valid_pattern {
        let (res, appended) = pattern;
        let index = apply_magic(magic, *appended);
        if index >= lookup.len() {
            return (false, None);
        }
        if lookup[index] == invalid_value || lookup[index] == *res {
            lookup[index] = *res
        } else {
            return (false, None);
        }
    }
    return (true, Some(lookup));
}
pub fn generate_magic() {
    let mut rand = rand::thread_rng();
    let mut valid_pattern: Vec<(u32, u64)> = Vec::new();
    for i in 0..PATTERNS {
        let (occ, obs) = put_along_mask(i as u32, NEIGHBOR_MASK_12 as u32);
        if obs.count_ones() > 3 {
            continue;
        }
        valid_pattern.push((
            get_accessible_neighbors_slow(occ as u128, obs as u128, 1u128 << CENTERED_FIELD) as u32,
            (occ as u64) << 32 | obs as u64,
        ));
    }
    loop {
        let random_u32 = rand.next_u32() & rand.next_u32() & rand.next_u32();
        let random_u322 = rand.next_u32() & rand.next_u32() & rand.next_u32();
        let random_u64 = (random_u32 as u64) << 32 | random_u322 as u64;
        let is_valid = is_valid_magic(random_u64, &valid_pattern);
        if is_valid.0 {
            println!("pub const NEIGHBOR_MAGIC: u64 = {}u64;\n#[rustfmt::skip]\npub const NEIGHBOR_MAGIC_LOOKUP : [u32;{}] = {};", random_u64, MAX_SIZE, HashKeys::arr_to_string(&is_valid.1.unwrap(), "u32"));
            break;
        }
        //if random_u64 % 10000000 == 0 {
        //    println!("{}", random_u64);
        //}
    }
}
pub fn put_along_mask(mut value: u32, mut mask: u32) -> (u32, u32) {
    let (mut occ, mut obs) = (0u32, 0u32);
    while value > 0 && mask > 0 {
        let type_of_value = value % 3;
        let mask_bit = mask.trailing_zeros();
        if type_of_value == 1 {
            occ |= 1u32 << mask_bit;
        } else if type_of_value == 2 {
            obs |= 1u32 << mask_bit;
        }
        mask ^= 1u32 << mask_bit;
        value /= 3;
    }
    (occ, obs)
}
pub fn get_accessible_neighbors(occupied: u128, obstacles: u128, field: u128) -> u128 {
    let field_index = field.trailing_zeros();
    let (shifted_occ, shifted_ob) = if field_index < 12 {
        (
            occupied << (12 - field_index),
            obstacles << (12 - field_index),
        )
    } else {
        (
            occupied >> (field_index - 12),
            obstacles >> (field_index - 12),
        )
    };
    let neighbors = NEIGHBOR_MAGIC_LOOKUP[apply_magic(
        NEIGHBOR_MAGIC,
        ((shifted_occ & NEIGHBOR_MASK_12) as u64) << 32 | (shifted_ob & NEIGHBOR_MASK_12) as u64,
    )] as u128;
    if field_index < 12 {
        (neighbors >> (12 - field_index)) & VALID_FIELDS
    } else {
        (neighbors << (field_index - 12)) & VALID_FIELDS
    }
}
pub fn get_accessible_neighbors_set(occupied: u128, obstacles: u128, fields: u128) -> u128 {
    let blocked = occupied | obstacles;
    let free = !blocked;

    let nowe = bitboard::shift_nowe(fields);
    let noea = bitboard::shift_noea(fields);
    let sowe = bitboard::shift_sowe(fields);
    let soea = bitboard::shift_soea(fields);
    let east = bitboard::shift_east(fields);
    let west = bitboard::shift_west(fields);

    let nowe_blocked = nowe & blocked;
    let noea_blocked = noea & blocked;
    let sowe_blocked = sowe & blocked;
    let soea_blocked = soea & blocked;
    let east_blocked = east & blocked;
    let west_blocked = west & blocked;

    let nowe_occupied = nowe & occupied;
    let noea_occupied = noea & occupied;
    let sowe_occupied = sowe & occupied;
    let soea_occupied = soea & occupied;
    let east_occupied = east & occupied;
    let west_occupied = west & occupied;

    let nowe_checked = nowe
        & ((!bitboard::shift_west(noea_blocked) & bitboard::shift_noea(west_occupied))
            | (!bitboard::shift_noea(west_blocked) & bitboard::shift_west(noea_occupied)));
    let noea_checked = noea
        & ((!bitboard::shift_east(nowe_blocked) & bitboard::shift_nowe(east_occupied))
            | (!bitboard::shift_nowe(east_blocked) & bitboard::shift_east(nowe_occupied)));
    let west_checked = west
        & ((!bitboard::shift_sowe(nowe_blocked) & bitboard::shift_nowe(sowe_occupied))
            | (!bitboard::shift_nowe(sowe_blocked) & bitboard::shift_sowe(nowe_occupied)));
    let east_checked = east
        & ((!bitboard::shift_soea(noea_blocked) & bitboard::shift_noea(soea_occupied))
            | (!bitboard::shift_noea(soea_blocked) & bitboard::shift_soea(noea_occupied)));
    let sowe_checked = sowe
        & ((!bitboard::shift_soea(west_blocked) & bitboard::shift_west(soea_occupied))
            | (!bitboard::shift_west(soea_blocked) & bitboard::shift_soea(west_occupied)));
    let soea_checked = soea
        & ((!bitboard::shift_sowe(east_blocked) & bitboard::shift_east(sowe_occupied))
            | (!bitboard::shift_east(sowe_blocked) & bitboard::shift_sowe(east_occupied)));

    (nowe_checked | noea_checked | west_checked | east_checked | sowe_checked | soea_checked) & free
}
pub fn get_accessible_neighbors_slow(occupied: u128, obstacles: u128, field: u128) -> u128 {
    let free = !(occupied | obstacles);
    let mut ret = 0;
    let nowe = bitboard::shift_nowe(field);
    let noea = bitboard::shift_noea(field);
    let sowe = bitboard::shift_sowe(field);
    let soea = bitboard::shift_soea(field);
    let east = bitboard::shift_east(field);
    let west = bitboard::shift_west(field);
    // check nowe
    let nowe_check = west | noea;
    if nowe_check & obstacles == 0 && (nowe_check & occupied).count_ones() == 1 {
        ret |= nowe;
    }
    // check west
    let west_check = nowe | sowe;
    if west_check & obstacles == 0 && (west_check & occupied).count_ones() == 1 {
        ret |= west;
    }
    // check noea
    let noea_check = nowe | east;
    if noea_check & obstacles == 0 && (noea_check & occupied).count_ones() == 1 {
        ret |= noea;
    }
    // check east
    let east_check = noea | soea;
    if east_check & obstacles == 0 && (east_check & occupied).count_ones() == 1 {
        ret |= east;
    }
    // check sowe
    let sowe_check = soea | west;
    if sowe_check & obstacles == 0 && (sowe_check & occupied).count_ones() == 1 {
        ret |= sowe;
    }
    // check soea
    let soea_check = sowe | east;
    if soea_check & obstacles == 0 && (soea_check & occupied).count_ones() == 1 {
        ret |= soea;
    }

    return ret & free;
}
